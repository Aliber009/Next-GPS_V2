import sys
import math
import urllib
import http.client
import time
import random

id = '000012'
server = 'localhost:5055'
period = 1
step = 0.001
device_speed = 30
driver_id = '22333'
""" waypoints = [(33.5432254, -7.6406825), (33.54322565, -7.6406824)] """

waypoints = [

    (33.541844, -7.640422), (33.54184, -7.640379), (33.541862, -7.640297),
    (33.541925, -7.6402), (33.541977, -7.64015), (33.542297, -7.639934),
    (33.542702, -7.639671), (33.542609, -7.639466), (33.542521, -7.639519),
    (33.541825, -7.640007), (33.541555, -7.640191), (33.541502, -7.640227),
    (33.541279, -7.640381), (33.541133, -7.640518), (33.541049, -7.640646),
    (33.54103, -7.64072), (33.54104, -7.64074), (33.541066, -7.640825),
    (33.541068, -7.640915), (33.541046, -7.641002), (33.541003, -7.641076),
    (33.540943, -7.64113), (33.540904, -7.64115), (33.540863, -7.64116),
    (33.540797, -7.64116), (33.540734, -7.641137), (33.540678, -7.641095),
    (33.540634, -7.641036), (33.540627, -7.641021), (33.54062, -7.641005),
    (33.540574, -7.64097), (33.540391, -7.640901), (33.54033, -7.640879),
    (33.540181, -7.640829), (33.539809, -7.640705), (33.539738, -7.640699),
    (33.539705, -7.640715), (33.53967, -7.640724), (33.539618, -7.640726),
    (33.53952, -7.640685), (33.539479, -7.640646), (33.539444, -7.640591),
    (33.538925, -7.640408), (33.53864, -7.640307), (33.537704, -7.639983),
    (33.536855, -7.639645), (33.536641, -7.639542), (33.536565, -7.639473),
    (33.534087, -7.63863), (33.534019, -7.638614), (33.533952, -7.63861),
    (33.533868, -7.638593), (33.533811, -7.63857), (33.533738, -7.638525),
    (33.533665, -7.638483), (33.532464, -
                             7.638037), (33.53136, -7.637676), (33.530912, -7.63751),
    (33.530332, -7.637291), (33.529364, -7.636963), (33.527977, -7.636527),
    (33.52432, -7.635246), (33.522895, -7.63472), (33.522832, -7.634696),
    (33.521503, -7.634178), (33.520631, -7.633757), (33.518617, -7.632827),
    (33.516472, -7.631852), (33.516336, -
                             7.631795), (33.51602, -7.63168), (33.515221, -7.631448),
    (33.514218, -7.631224), (33.513672, -7.631101), (33.513137, -7.631012),
    (33.5125, -7.630878), (33.510551, -7.630466), (33.510005, -7.630358),
    (33.50933, -7.630219), (33.508616, -7.630071), (33.507265, -7.629787),
    (33.507184, -7.629767), (33.506969, -
                             7.629725), (33.506649, -7.629676), (33.506152, -7.629578),
    (33.505837, -7.629513), (33.505333, -7.629404), (33.504929, -7.629325),
    (33.504512, -7.62924), (33.504008, -7.629137), (33.502989, -7.628923),
    (33.500926, -7.628474), (33.500556, -7.628412), (33.500442, -7.628403),
    (33.499825, -7.628323), (33.499444, -
                             7.6283), (33.499083, -7.62828), (33.498186, -7.628335),
    (33.4977, -7.628412), (33.497369, -7.628499), (33.494131, -7.629417),
    (33.491348, -7.630233), (33.488699, -7.63096), (33.486586, -7.631591),
    (33.485477, -7.631905), (33.485097, -7.632011), (33.484043, -7.632289),
    (33.482626, -7.632714), (33.481805, -7.632977), (33.481365, -7.633095),
    (33.481018, -7.633182), (33.480609, -7.633284), (33.480073, -7.633366),
    (33.479734, -7.633404), (33.479015, -7.633438), (33.47649, -7.633426),
    (33.471889, -7.633454), (33.470871, -7.633441), (33.46852, -7.633449),
    (33.46616, -7.633419), (33.463312, -7.633445), (33.460967, -7.633421),
    (33.45339, -7.633458), (33.4523, -7.633442), (33.450192, -7.633446),
    (33.449459, -7.633418), (33.449086, -7.633366), (33.448442, -7.633243),
    (33.448056, -7.633143), (33.447314, -7.632899), (33.445611, -7.632291),
    (33.444876, -7.632046), (33.443693, -7.631607), (33.441767, -7.630935),
    (33.440457, -7.630487), (33.439938, -7.63037), (33.439651, -7.630315),
    (33.439536, -7.630309), (33.43929, -7.630355), (33.43906, -7.630453),
    (33.438854, -7.63061), (33.437881, -7.631472), (33.437774, -7.631617),
    (33.437691, -7.631779), (33.437694, -7.631888), (33.437662, -7.63199),
    (33.437674, -7.632215), (33.4377, -7.632348), (33.437834, -7.632604),
    (33.438044, -7.632899), (33.438261, -7.633191), (33.439081, -7.634178),
    (33.439674, -7.634901), (33.439879, -7.635151), (33.44001, -7.63531),
    (33.440779, -7.636248), (33.440832, -7.636312), (33.441141, -7.63669),
    (33.442792, -7.638717), (33.442891, -7.638836), (33.443235, -7.63925),
    (33.443935, -7.640102), (33.444148, -7.640313), (33.444269, -7.640409),
    (33.444405, -7.64049), (33.444567, -7.640566), (33.448192, -7.641911),
    (33.448967, -7.642237), (33.449295, -7.642407), (33.449444, -7.642478),
    (33.449476, -7.642462), (33.449511, -7.64246), (33.449544, -7.642471),
    (33.449574, -7.642494), (33.449595, -7.642528), (33.449604, -7.642554),
    (33.449608, -7.642597), (33.4496, -7.642639), (33.449581, -7.642675),
    (33.449547, -7.642706), (33.449506, -7.642719), (33.449464, -7.642712),
    (33.449427, -7.642686), (33.449391, -7.642628), (33.449391, -7.642613),

]

points = []

for i in range(0, len(waypoints)):
    (lat1, lon1) = waypoints[i]
    (lat2, lon2) = waypoints[(i + 1) % len(waypoints)]
    length = math.sqrt((lat2 - lat1) ** 2 + (lon2 - lon1) ** 2)
    count = int(math.ceil(length / step))
    for j in range(0, count):
        lat = lat1 + (lat2 - lat1) * j / count
        lon = lon1 + (lon2 - lon1) * j / count
        points.append((lat, lon))


def send(conn, lat, lon, course, speed, alarm, ignition, accuracy, rpm, fuel, driverUniqueId):
    params = (('id', id), ('timestamp', int(time.time())), ('lat', lat),
              ('lon', lon), ('bearing', course), ('speed', speed))
    if alarm:
        params = params + (('alarm', 'sos'),)
    if ignition:
        params = params + (('ignition', 'true'),)
    if accuracy:
        params = params + (('accuracy', accuracy),)
    if rpm:
        params = params + (('rpm', rpm),)
    if fuel:
        params = params + (('fuel', fuel),)
    if driverUniqueId:
        params = params + (('driverUniqueId', driverUniqueId),)

    conn.request('GET', '?' + urllib.parse.urlencode(params))
    conn.getresponse().read()


def course(lat1, lon1, lat2, lon2):
    lat1 = lat1 * math.pi / 180
    lon1 = lon1 * math.pi / 180
    lat2 = lat2 * math.pi / 180
    lon2 = lon2 * math.pi / 180
    y = math.sin(lon2 - lon1) * math.cos(lat2)
    x = math.cos(lat1) * math.sin(lat2) - math.sin(lat1) * \
        math.cos(lat2) * math.cos(lon2 - lon1)
    return (math.atan2(y, x) % (2 * math.pi)) * 180 / math.pi


index = 0

conn = http.client.HTTPConnection(server)

while True:
    (lat1, lon1) = points[index % len(points)]
    (lat2, lon2) = points[(index + 1) % len(points)]
    speed = device_speed if (index % len(points)) != 0 else 0
    alarm = (index % 10) == 0
    ignition = (index % len(points)) != 0
    accuracy = 100 if (index % 10) == 0 else 0
    rpm = random.randint(500, 4000)
    fuel = random.randint(0, 80)
    driverUniqueId = driver_id if (index % len(points)) == 0 else False
    send(conn, lat1, lon1, course(lat1, lon1, lat2, lon2), speed,
         alarm, ignition, accuracy, rpm, fuel, driverUniqueId)
    time.sleep(period)
    index += 1
